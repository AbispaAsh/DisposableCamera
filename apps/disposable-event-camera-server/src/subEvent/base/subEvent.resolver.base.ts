/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { SubEvent } from "./SubEvent";
import { SubEventCountArgs } from "./SubEventCountArgs";
import { SubEventFindManyArgs } from "./SubEventFindManyArgs";
import { SubEventFindUniqueArgs } from "./SubEventFindUniqueArgs";
import { CreateSubEventArgs } from "./CreateSubEventArgs";
import { UpdateSubEventArgs } from "./UpdateSubEventArgs";
import { DeleteSubEventArgs } from "./DeleteSubEventArgs";
import { Event } from "../../event/base/Event";
import { SubEventService } from "../subEvent.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => SubEvent)
export class SubEventResolverBase {
  constructor(
    protected readonly service: SubEventService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "SubEvent",
    action: "read",
    possession: "any",
  })
  async _subEventsMeta(
    @graphql.Args() args: SubEventCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [SubEvent])
  @nestAccessControl.UseRoles({
    resource: "SubEvent",
    action: "read",
    possession: "any",
  })
  async subEvents(
    @graphql.Args() args: SubEventFindManyArgs
  ): Promise<SubEvent[]> {
    return this.service.subEvents(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => SubEvent, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "SubEvent",
    action: "read",
    possession: "own",
  })
  async subEvent(
    @graphql.Args() args: SubEventFindUniqueArgs
  ): Promise<SubEvent | null> {
    const result = await this.service.subEvent(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SubEvent)
  @nestAccessControl.UseRoles({
    resource: "SubEvent",
    action: "create",
    possession: "any",
  })
  async createSubEvent(
    @graphql.Args() args: CreateSubEventArgs
  ): Promise<SubEvent> {
    return await this.service.createSubEvent({
      ...args,
      data: {
        ...args.data,

        event: args.data.event
          ? {
              connect: args.data.event,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SubEvent)
  @nestAccessControl.UseRoles({
    resource: "SubEvent",
    action: "update",
    possession: "any",
  })
  async updateSubEvent(
    @graphql.Args() args: UpdateSubEventArgs
  ): Promise<SubEvent | null> {
    try {
      return await this.service.updateSubEvent({
        ...args,
        data: {
          ...args.data,

          event: args.data.event
            ? {
                connect: args.data.event,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SubEvent)
  @nestAccessControl.UseRoles({
    resource: "SubEvent",
    action: "delete",
    possession: "any",
  })
  async deleteSubEvent(
    @graphql.Args() args: DeleteSubEventArgs
  ): Promise<SubEvent | null> {
    try {
      return await this.service.deleteSubEvent(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Event, {
    nullable: true,
    name: "event",
  })
  @nestAccessControl.UseRoles({
    resource: "Event",
    action: "read",
    possession: "any",
  })
  async getEvent(@graphql.Parent() parent: SubEvent): Promise<Event | null> {
    const result = await this.service.getEvent(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
