/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  SubEvent as PrismaSubEvent,
  Event as PrismaEvent,
} from "@prisma/client";

export class SubEventServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.SubEventCountArgs, "select">): Promise<number> {
    return this.prisma.subEvent.count(args);
  }

  async subEvents<T extends Prisma.SubEventFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.SubEventFindManyArgs>
  ): Promise<PrismaSubEvent[]> {
    return this.prisma.subEvent.findMany<Prisma.SubEventFindManyArgs>(args);
  }
  async subEvent<T extends Prisma.SubEventFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.SubEventFindUniqueArgs>
  ): Promise<PrismaSubEvent | null> {
    return this.prisma.subEvent.findUnique(args);
  }
  async createSubEvent<T extends Prisma.SubEventCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SubEventCreateArgs>
  ): Promise<PrismaSubEvent> {
    return this.prisma.subEvent.create<T>(args);
  }
  async updateSubEvent<T extends Prisma.SubEventUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SubEventUpdateArgs>
  ): Promise<PrismaSubEvent> {
    return this.prisma.subEvent.update<T>(args);
  }
  async deleteSubEvent<T extends Prisma.SubEventDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.SubEventDeleteArgs>
  ): Promise<PrismaSubEvent> {
    return this.prisma.subEvent.delete(args);
  }

  async getEvent(parentId: string): Promise<PrismaEvent | null> {
    return this.prisma.subEvent
      .findUnique({
        where: { id: parentId },
      })
      .event();
  }
}
